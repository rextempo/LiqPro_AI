"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const monitoring_1 = require("@liqpro/monitoring");
const dotenv_1 = __importDefault(require("dotenv"));
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const http_1 = __importDefault(require("http"));
const api_1 = require("./routes/api");
const data_controller_1 = require("./modules/data-controller");
const mongodb_storage_1 = require("./modules/storage/mongodb-storage");
// Load environment variables
dotenv_1.default.config();
const logger = (0, monitoring_1.createLogger)('data-service:server');
// Configuration
const config = {
    port: parseInt(process.env.PORT || '3001'),
    rpcEndpoint: process.env.SOLANA_RPC_ENDPOINT || 'https://api.mainnet-beta.solana.com',
    rpcCommitment: (process.env.SOLANA_RPC_COMMITMENT || 'confirmed'),
    meteoraProgramId: process.env.METEORA_PROGRAM_ID || '675kPX9MHTjS2zt1qfr1NYHuzeLXfQM9H24wFSUt1Mp8',
    mongodb: {
        uri: process.env.MONGODB_URI || 'mongodb://localhost:27017',
        dbName: process.env.MONGODB_DB_NAME || 'liqpro_data',
    },
    collectionIntervals: {
        poolData: parseInt(process.env.POOL_DATA_INTERVAL || '60000'),
        events: parseInt(process.env.EVENTS_INTERVAL || '30000'),
        marketPrices: parseInt(process.env.MARKET_PRICES_INTERVAL || '300000'),
    },
    whaleThresholds: {
        swapUsdValue: parseInt(process.env.WHALE_SWAP_THRESHOLD || '10000'),
        depositUsdValue: parseInt(process.env.WHALE_DEPOSIT_THRESHOLD || '50000'),
        withdrawUsdValue: parseInt(process.env.WHALE_WITHDRAW_THRESHOLD || '50000'),
    },
};
// Initialize storage
const storage = new mongodb_storage_1.MongoDBStorage({
    uri: config.mongodb.uri,
    dbName: config.mongodb.dbName,
    collections: {
        poolData: 'pool_data',
        poolMetadata: 'pool_metadata',
        events: 'events',
        tokenPrices: 'token_prices',
        tokenMetadata: 'token_metadata',
        whaleActivities: 'whale_activities',
    },
    indexes: {
        enabled: true,
        ttl: {
            poolData: 60 * 60 * 24 * 30, // 30 days
            events: 60 * 60 * 24 * 90, // 90 days
            tokenPrices: 60 * 60 * 24 * 30, // 30 days
        },
    },
});
// Initialize data controller
const dataController = new data_controller_1.DataController({
    rpcEndpoint: config.rpcEndpoint,
    rpcCommitment: config.rpcCommitment,
    meteoraProgramId: config.meteoraProgramId,
    collectionIntervals: config.collectionIntervals,
    whaleThresholds: config.whaleThresholds,
    storage,
});
// Create Express app
const app = (0, express_1.default)();
// Middleware
app.use((0, cors_1.default)());
app.use(express_1.default.json());
app.use(express_1.default.urlencoded({ extended: true }));
// API routes
app.use('/api', (0, api_1.createApiRoutes)(dataController));
// Health check endpoint
app.get('/health', (req, res) => {
    res.status(200).json({ status: 'ok' });
});
// Error handler
app.use((err, req, res, next) => {
    logger.error('Unhandled error', { error: err });
    res.status(500).json({ error: 'Internal server error' });
});
// Create HTTP server
const server = http_1.default.createServer(app);
// Setup WebSocket server
const wss = (0, api_1.setupWebSocket)(server, dataController);
// Start server
async function startServer() {
    try {
        // Connect to MongoDB
        await storage.connect();
        // Start data controller
        await dataController.start();
        // Start server
        server.listen(config.port, () => {
            logger.info(`Server started on port ${config.port}`);
        });
        // Handle shutdown
        const shutdown = async () => {
            logger.info('Shutting down...');
            // Stop data controller
            dataController.stop();
            // Close WebSocket server
            wss.close();
            // Close HTTP server
            server.close();
            // Disconnect from MongoDB
            await storage.disconnect();
            logger.info('Shutdown complete');
            process.exit(0);
        };
        process.on('SIGINT', shutdown);
        process.on('SIGTERM', shutdown);
    }
    catch (error) {
        logger.error('Failed to start server', { error });
        process.exit(1);
    }
}
// Start server
startServer();
//# sourceMappingURL=data:application/json;base64,