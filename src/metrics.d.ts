import client from 'prom-client';
import { Request, Response, NextFunction } from 'express';
export declare const register: client.Registry;
export declare const httpRequestsTotal: client.Counter<"method" | "route" | "status_code">;
export declare const httpRequestDurationSeconds: client.Histogram<"method" | "route" | "status_code">;
export declare const mqConnectionStatus: client.Gauge<string>;
export declare const mqMessagesPublishedTotal: client.Counter<"exchange" | "routing_key">;
export declare const mqMessagesConsumedTotal: client.Counter<"queue" | "event_type">;
export declare const mqMessageProcessingDurationSeconds: client.Histogram<"queue" | "event_type">;
export declare const mqMessageProcessingErrorsTotal: client.Counter<"queue" | "event_type" | "error_type">;
export declare const agentsTotal: client.Gauge<"status">;
export declare const agentOperationsTotal: client.Counter<"status" | "operation">;
export declare const agentOperationDurationSeconds: client.Histogram<"operation">;
export declare const systemHealthStatus: client.Gauge<"component">;
export declare function metricsMiddleware(): (req: Request, res: Response, next: NextFunction) => any;
export declare function setupMetricsEndpoint(app: any): void;
export declare function resetMetrics(): void;
declare const _default: {
    register: client.Registry;
    httpRequestsTotal: client.Counter<"method" | "route" | "status_code">;
    httpRequestDurationSeconds: client.Histogram<"method" | "route" | "status_code">;
    mqConnectionStatus: client.Gauge<string>;
    mqMessagesPublishedTotal: client.Counter<"exchange" | "routing_key">;
    mqMessagesConsumedTotal: client.Counter<"queue" | "event_type">;
    mqMessageProcessingDurationSeconds: client.Histogram<"queue" | "event_type">;
    mqMessageProcessingErrorsTotal: client.Counter<"queue" | "event_type" | "error_type">;
    agentsTotal: client.Gauge<"status">;
    agentOperationsTotal: client.Counter<"status" | "operation">;
    agentOperationDurationSeconds: client.Histogram<"operation">;
    systemHealthStatus: client.Gauge<"component">;
    metricsMiddleware: typeof metricsMiddleware;
    setupMetricsEndpoint: typeof setupMetricsEndpoint;
    resetMetrics: typeof resetMetrics;
};
export default _default;
