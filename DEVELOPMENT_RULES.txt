# LiqPro 开发规则

## 1. 代码库组织规范

### 1.1 目录结构
- 所有微服务必须放在 `/services` 目录下
- 每个微服务有自己的独立目录，如 `/services/api-service`
- 共享库放在 `/libs` 目录下
- 配置文件统一放在 `/config` 目录下，按服务分类
- 部署相关文件统一放在 `/unified-config` 目录下

### 1.2 微服务列表
- frontend: 前端应用
- api-service: API服务
- data-service: 数据服务
- signal-service: 信号服务
- scoring-service: 评分服务
- agent-engine: Agent引擎
- solana-cache: Solana缓存服务

## 2. 命名规范

### 2.1 文件和目录命名
- 微服务目录名使用连字符命名法，如 `api-service`
- 源代码文件使用小驼峰命名法，如 `userService.js`
- 配置文件使用小写加连字符，如 `docker-compose.yml`
- 环境变量文件使用 `.env` 前缀，如 `.env.dev`

### 2.2 代码命名
- 变量和函数使用小驼峰命名法，如 `getUserData()`
- 类和组件使用大驼峰命名法，如 `UserProfile`
- 常量使用大写下划线命名法，如 `MAX_RETRY_COUNT`
- 私有方法和变量前缀使用下划线，如 `_privateMethod()`

## 3. 文件路径规范

### 3.1 导入路径
- 使用相对路径导入同一微服务内的模块
- 使用绝对路径导入其他微服务或共享库的模块
- 避免使用 `../../../` 这样的多级相对路径

### 3.2 资源路径
- 静态资源放在各自微服务的 `/public` 或 `/assets` 目录下
- 配置文件放在 `/config/{service-name}` 目录下
- 日志文件统一输出到 `/logs` 目录（通过 Docker 卷挂载）

## 4. 微服务版本管理

### 4.1 版本号规范
- 遵循语义化版本控制 (SemVer)：主版本.次版本.修订号
- 主版本号：不兼容的 API 修改
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正

### 4.2 依赖管理
- package.json 中明确指定依赖版本，避免使用 `^` 或 `~`
- 定期更新依赖包以修复安全漏洞
- 共享依赖放在 `/libs` 目录下，避免重复安装

## 5. 环境配置规范

### 5.1 环境模式
- 开发模式 (dev)：支持热更新和使用真实数据，适合开发和测试
- 生产模式 (prod)：针对部署优化，关闭热更新

### 5.2 环境变量
- 所有配置通过环境变量控制，不要硬编码
- 开发环境变量放在 `/unified-config/.env.dev`
- 生产环境变量放在 `/unified-config/.env.prod`
- 敏感信息（如密钥、密码）不要提交到代码库，使用环境变量注入

### 5.3 Docker 配置
- 所有服务使用统一的 Docker Compose 配置文件 `/unified-config/docker-compose.yml`
- 通过环境变量控制不同环境的行为
- 容器名称使用 `liqpro-{service-name}` 格式
- 开发环境使用 `npm run start` 启动服务
- 生产环境使用 `npm run build && npm run serve` 启动前端服务

## 6. 开发流程

### 6.1 启动开发环境
```bash
./start-unified.sh  # 选择开发模式
# 或直接
cd unified-config && ./start.sh dev
```

### 6.2 代码修改
- 修改代码后，服务会自动重新加载（热更新）
- 前端代码修改会自动刷新浏览器
- 后端代码修改会自动重启相应服务

### 6.3 查看日志
```bash
cd unified-config
docker-compose logs -f [服务名]  # 查看特定服务的日志
```

### 6.4 停止服务
```bash
cd unified-config && ./stop.sh
```

## 7. 提交规范

### 7.1 Git 提交信息
- 使用明确的提交信息，格式为 `类型: 描述`
- 类型包括：feat (新功能)、fix (修复)、docs (文档)、style (格式)、refactor (重构)、test (测试)、chore (构建/工具)
- 示例：`feat: 添加用户认证功能` 或 `fix: 修复数据服务连接问题`

### 7.2 分支管理
- 所有开发工作在 feature 分支进行
- 完成后合并到 main 分支
- 分支命名格式：`feature/功能名称` 或 `fix/问题描述`

## 8. 测试规范

### 8.1 单元测试
- 每个微服务应有自己的单元测试
- 测试文件放在 `__tests__` 目录或与源文件同目录的 `.test.js` 文件
- 使用 Jest 或类似的测试框架

### 8.2 集成测试
- 使用开发环境进行集成测试
- 确保服务间通信正常
- 测试真实数据流

## 9. 文档规范

### 9.1 代码注释
- 使用 JSDoc 风格的注释
- 为公共 API 和复杂逻辑添加注释
- 注释应解释"为什么"而不仅仅是"是什么"

### 9.2 README 文件
- 每个微服务目录应有自己的 README.md
- 包含服务描述、安装步骤、API 文档和使用示例

## 10. 安全规范

### 10.1 代码安全
- 不要在代码中硬编码敏感信息
- 使用环境变量存储密钥、密码等
- 定期更新依赖以修复安全漏洞

### 10.2 API 安全
- 实现适当的认证和授权
- 验证所有用户输入
- 使用 HTTPS 进行通信
- 实现速率限制防止滥用

---

请遵循以上规则进行开发，有任何问题请联系团队负责人。 